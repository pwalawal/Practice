/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        
        if(node==null){
            return null;
        }
        HashMap<Node,Node>map=new HashMap<>();
        Queue<Node>queue=new LinkedList<>();
        queue.add(node);
        map.put(node,new Node(node.val));
        
        while(!queue.isEmpty()){
            Node temp=queue.poll();
           
            
            //visited[temp.val]=true;
            
            for(Node child:temp.neighbors){
                if(!map.containsKey(child)){
                    queue.offer(child);
                    map.put(child,new Node(child.val));
                }
                map.get(temp).neighbors.add(map.get(child));
            }
            
            
            
            
        }
        return map.get(node);
    }
}
